{
  // https://www.typescriptlang.org/docs/handbook/compiler-options.html
  "compilerOptions": {
    "target": "ES6", // 指定编译之后的版本目标
    "allowJs": true, // 允许编译 JS 文件
    "checkJs": true, // 报告 JS 文件中存在的类型错误，需要配合 allowJs 使用
    "module": "ESNext", // 指定生成哪个模块系统代码
    "lib": [
      "ESNext",
      "DOM"
    ], // 指定要包含在编译中的库文件
    // 'react' 模式下，ts 会将 tsx 编译成 jsx 后再将 jsx 编译成 js
    // 'preserve' 模式下：ts 会将 tsx 编译成 jsx 后，不再将 jsx 编译成 js，保留 jsx 
    // 保留 jsx 时，就需要在 ts-loader 前面配置 babel-loader 去处理 jsx 
    // 换句话说：只有想要用 babel-loader 的时候，才需要设置这个值
    "jsx": "react-jsx", // 指定jsx代码用于的开发环境。"react-jsx"是配合react17带来的全新JSX转换：https://zhuanlan.zhihu.com/p/313040458
    "resolveJsonModule": true, // Include modules imported with .json extension
    "experimentalDecorators": true, // 启用实验功能-ES 装饰器
    "allowSyntheticDefaultImports": true, // 指定允许从没有默认导出的模块中默认导入
    "allowUnreachableCode": false, // 不允许有无法reach的代码存在
    "moduleResolution": "node", // 选择模块解析策略，有"node"和"classic"两种类型
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true, // 用于检查switch中是否有case没有使用break跳出switch，默认为false
    "skipLibCheck": true, // 忽略所有的声明文件（ *.d.ts）的类型检查
    "noEmit": true, // 不生成编译文件
    "noImplicitReturns": true, // true，如果函数没有返回值则会提示
    "noImplicitThis": true, // true，当 this表达式的值为 any类型的时候，生成一个错误
    "noImplicitAny": false, // false，如果没有为一些值设置明确的类型，编译器会默认认为这个值为any类型
    "importHelpers": true, // 引入tslib里的辅助工具函数
    "strictNullChecks": true, // true时，null和undefined值不能赋值给非这两种类型的值，别的类型的值也不能赋给他们，除了any类型，还有个例外就是undefined可以赋值给void类型
    "suppressImplicitAnyIndexErrors": true,
    "noUnusedLocals": false, // 检查是否有定义了但是没有使用的变量
    "baseUrl": ".", // 用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响
    "paths": { // 用于设置模块名到基于baseUrl的路径映射
      "*": [
        "*",
        "app/*"
      ]
    }
  },
  "exclude": [
    "scripts",
    "dist",
    "build",
    "buildDev"
  ]
}